# use QUANLISINHVIEN;
# insert into class(classname, startdate, status) VALUES ('A1','2008/12/20',1);
# insert into class(classname, startdate, status) VALUES ('A2','2008/12/20',TRUE);
# insert into class(classname, startdate, status) VALUES ('A2','2008/12/20',0);
# INSERT INTO Class
# VALUES (4, 'B3', current_date, 0);
# INSERT INTO Student (StudentName, Address, Phone, Status, ClassId)
# VALUES ('Hung', 'Ha Noi', '0912113113', 1, 1);
# INSERT INTO Student (StudentName, Address, Status, ClassId)
# VALUES ('Hoa', 'Hai phong', 1, 1);
# INSERT INTO Student (StudentName, Address, Phone, Status, ClassId)
# VALUES ('Manh', 'HCM', '0123123123', 0, 2);
# INSERT INTO Mark (SubId, StudentId, Mark, ExamTime)
# VALUES (1, 1, 8, 1),
#        (1, 2, 10, 2),
#        (2, 1, 12, 1);
# SELECT * FROM student;
# SELECT * FROM STUDENT WHERE STATUS = TRUE;
# SELECT * FROM SUBJECT WHERE CREDIT < 10;
# SELECT S.STUDENTID, S.STUDENTNAME, C.CLASSNAME FROM student S JOIN CLASS C ON S.CLASSID = C.CLASSID;
# SELECT S.STUDENTID, S.STUDENTNAME, C.CLASSNAME FROM student S JOIN CLASS C ON S.CLASSID = C.CLASSID WHERE C.CLASSNAME = 'A1';
# SELECT S.STUDENTID, S.STUDENTNAME, SUB.SUBNAME, M.MARK FROM STUDENT S JOIN MARK M on S.studentID = M.STUDENTID JOIN SUBJECT SUB on SUB.SUBID = M.SUBID;
# SELECT S.StudentId, S.StudentName, Sub.SubName, M.Mark
# FROM Student S join Mark M on S.StudentId = M.StudentId join Subject Sub on M.SubId = Sub.SubId;
# SELECT S.StudentId, S.StudentName, Sub.SubName, M.Mark
# FROM Student S join Mark M on S.StudentId = M.StudentId join Subject Sub on M.SubId = Sub.SubId WHERE SUBNAME='CF';
# SELECT S.StudentId, S.StudentName, Sub.SubName, M.Mark
# FROM Student S join Mark M on S.StudentId = M.StudentId join Subject Sub on M.SubId = Sub.SubId WHERE SUB.SUBNAME = 'CF';
# SELECT  * FROM STUDENT WHERE STUDENTNAME LIKE 'h%' OR STUDENTNAME LIKE 'm%';
# SELECT  * FROM STUDENT WHERE STUDENTNAME LIKE 'h%' OR STUDENTNAME LIKE 'H%';
# SELECT  * FROM STUDENT WHERE STUDENTNAME LIKE 'h%' OR STUDENTNAME LIKE 'm%';
# SELECT * FROM CLASS WHERE MONTH(startdate) = 12;
# SELECT *FROM SUBJECT WHERE CREDIT BETWEEN 3 AND 5;
# update student
# SET CLASSID = 2
# WHERE STUDENTNAME = 'HUNG';
# # Hiển thị các thông tin: StudentName, SubName, Mark.
# #     Dữ liệu sắp xếp theo điểm thi (mark) giảm dần. nếu trùng sắp theo tên tăng dần.
# SELECT S.STUDENTNAME,SUB.SUBNAME, M.MARK FROM STUDENT S JOIN MARK M ON M.STUDENTID = S.studentID JOIN SUBJECT SUB ON SUB.SUBID = M.SUBID
# ORDER BY MARK DESC, STUDENTNAME ASC ;
# INSERT INTO Mark (SubId, StudentId, Mark, ExamTime)
# VALUES (1, 3, 8, 1);
# INSERT INTO Mark (SubId, StudentId, Mark, ExamTime)
# VALUES (2, 3, 12, 1);
USE QuanLyBanHang;
INSERT INTO CUSTOMER(CUSNAME, AGE) VALUES ('NGHIA', 18);
INSERT INTO CUSTOMER(CUSNAME, AGE) VALUES ('PHUC', 12);
INSERT INTO CUSTOMER(CUSNAME, AGE) VALUES ('QUANG', 16);
INSERT INTO ORDERR(CUSTOMERID, ODATE, OTOTALPRICE) VALUES (1,'2023-03-23',0);
INSERT INTO ORDERR(CUSTOMERID, ODATE, OTOTALPRICE) VALUES (2,'2023-04-10',0);
INSERT INTO ORDERR(CUSTOMERID, ODATE, OTOTALPRICE) VALUES (3,'2023-05-07',0);
INSERT INTO ORDERR(CUSTOMERID, ODATE, OTOTALPRICE) VALUES (2,'2023-02-13',0);
INSERT INTO PRODUCT(NAME, PRICE) VALUES ('MAY GIAT', 20);

INSERT INTO PRODUCT(NAME, PRICE) VALUES ('TU LANH', 25);
INSERT INTO PRODUCT(NAME, PRICE) VALUES ('MAY SAY', 10);
INSERT INTO PRODUCT(NAME, PRICE) VALUES ('BAN UI', 5);
INSERT INTO PRODUCT(NAME, PRICE) VALUES ('BEP DIEN', 15);
CREATE TABLE ORDERDETAIL(
    ORDER_ID INT,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERR(ORDERID),
    PRODUCT_ID INT,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCTID),
    OQUANTITY BIGINT NOT NULL
);
INSERT INTO ORDERDETAIL(ORDER_ID, PRODUCT_ID, OQUANTITY) VALUES (1,1,5);
INSERT INTO ORDERDETAIL(ORDER_ID, PRODUCT_ID, OQUANTITY) VALUES (2,2,6);
INSERT INTO ORDERDETAIL(ORDER_ID, PRODUCT_ID, OQUANTITY) VALUES (4,3,5);
INSERT INTO ORDERDETAIL(ORDER_ID, PRODUCT_ID, OQUANTITY) VALUES (1,1,5);
INSERT INTO ORDERDETAIL(ORDER_ID, PRODUCT_ID, OQUANTITY) VALUES (2,5,5);
INSERT INTO ORDERDETAIL(ORDER_ID, PRODUCT_ID, OQUANTITY) VALUES (3,4,5);
INSERT INTO ORDERDETAIL(ORDER_ID, PRODUCT_ID, OQUANTITY) VALUES (1,3,5);
INSERT INTO ORDERDETAIL(ORDER_ID, PRODUCT_ID, OQUANTITY) VALUES (2,2,5);

SELECT ORDERID,ODATE,OTOTALPRICE FROM ORDERR;
# Hiển thị danh sách các khách hàng đã mua hàng, và danh sách sản phẩm được mua bởi các khách
SELECT C.CUSNAME, P.NAME
FROM CUSTOMER C
JOIN ORDERR O ON O.CUSTOMERID = C.CUSTOMERID
JOIN ORDERDETAIL OD ON OD.ORDER_ID = O.ORDERID
JOIN PRODUCT P ON P.PRODUCTID = OD.PRODUCT_ID;
#Hiển thị tên những khách hàng không mua bất kỳ một sản phẩm nào
INSERT INTO CUSTOMER(CUSNAME, AGE) VALUES ('HONG',23);
SELECT CUSNAME
FROM Customer
WHERE NOT EXISTS (
    SELECT *
    FROM ORDERR
    WHERE ORDERR.CUSTOMERID = Customer.CUSTOMERID
);
#Hiển thị mã hóa đơn, ngày bán và giá tiền của từng hóa đơn
#(giá một hóa đơn được tính bằng tổng giá bán của từng loại
#mặt hàng xuất hiện trong hóa đơn. Giá bán của từng loại được tính = odQTY*pPrice)
CREATE TABLE INVOICE(
    ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL ,
    ORDER_ID INT,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERR(ORDERID),
    DATE DATE NOT NULL,
    TOTAL DOUBLE DEFAULT 0
);

# Để hiển thị mã hóa đơn, ngày bán và giá tiền của từng hóa đơn dựa trên tính toán giá bán của từng loại mặt hàng xuất hiện trong hóa đơn, bạn có thể sử dụng truy vấn SQL sau:
SELECT O.ORDERID, O.ODATE,
       SUM(OD.OQUANTITY * P.PRICE) AS TotalPrice
FROM ORDERR O
         JOIN OrderDetail OD ON O.OrderID = OD.ORDER_ID
         JOIN PRODUCT P ON OD.PRODUCT_ID = P.PRODUCTID
GROUP BY O.OrderID, O.ODATE












